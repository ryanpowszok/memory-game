{"version":3,"sources":["providers/appProvider.js","reducers/appReducer.js","hooks/useApp.js","hooks/useAppContext.js","Components/Header/Header.js","api/getData.js","Components/Card/Card.js","Components/Cards/Cards.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","AppProvider","Provider","initialState","winner","turns","appReducer","state","action","type","payload","Error","appContext","useContext","dispatch","useAppContext","incrementTurns","setWinner","isWinner","Header","appState","useApp","className","getDataById","id","data","find","c","Promise","resolve","reject","label","array","i","length","j","Math","floor","random","temp","shuffle","map","card","uuid","Card","index","isMatched","isSelected","selectCard","isFlipped","select","cn","role","tabIndex","onClick","evt","preventDefault","onKeyDown","keyCode","aria-label","aria-hidden","SETTINGS","selected","matched","Cards","useState","setData","cards","setCards","useEffect","a","getData","fetchData","key","hasOwnProperty","selectedKeys","Object","keys","firstCardId","setTimeout","handleSelectCard","App","useReducer","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1f5bb72.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const AppContext = React.createContext({});\nexport const AppProvider = AppContext.Provider;\nexport default AppProvider;\n","export const initialState = {\n  winner: false,\n  turns: 0,\n};\n\nexport const appReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_WINNER\":\n      return {\n        winner: action.payload,\n      };\n    case \"INCREMENT_TURNS\":\n      return {\n        turns: state.turns + 1,\n      };\n\n    default:\n      throw new Error(\"Unexpected action\");\n  }\n};\nexport default appReducer;\n","import useAppContext from \"./useAppContext\";\n\nexport default () => {\n  const { state, dispatch } = useAppContext();\n\n  const { turns, winner } = state;\n  const setWinner = (isWinner) => {\n    dispatch({\n      type: \"SET_WINNER\",\n      payload: isWinner,\n    });\n  };\n  const incrementTurns = () => {\n    dispatch({\n      type: \"INCREMENT_TURNS\",\n    });\n  };\n\n  return {\n    turns,\n    incrementTurns,\n    winner,\n    setWinner,\n  };\n};\n","import { useContext } from \"react\";\nimport { AppContext } from \"../providers/appProvider\";\n\nexport default () => {\n  const appContext = useContext(AppContext);\n  return {\n    state: appContext[0],\n    dispatch: appContext[1],\n  };\n};\n","import React from \"react\";\nimport useApp from \"../../hooks/useApp\";\nimport \"./Header.css\";\n\nconst Header = () => {\n  const appState = useApp();\n  return (\n    <header className=\"Header\">\n      <h1 className=\"Header__title\">Memory Game</h1>\n      {appState.turns > 0 && (\n        <div className=\"Header__turns\">\n          {appState.turns} Turn{appState.turns !== 1 && \"s\"}\n        </div>\n      )}\n      {appState.winner && (\n        <h2 className=\"Header__subtitle\">Winner Winner Chicken Dinner</h2>\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","import uuid from \"uuid/v4\";\n\nexport const getDataById = (id, data) => data.find((c) => c.id === id);\n\nconst shuffle = (array = []) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nexport default () =>\n  new Promise((resolve, reject) => {\n    let data = [\n      { label: \"1\" },\n      { label: \"2\" },\n      { label: \"3\" },\n      { label: \"4\" },\n      { label: \"5\" },\n      { label: \"6\" },\n      { label: \"7\" },\n      { label: \"8\" },\n      { label: \"9\" },\n      { label: \"10\" },\n      { label: \"11\" },\n      { label: \"12\" },\n    ];\n    data = [...data, ...data];\n    data = data.map((card, i) => {\n      return { ...card, id: uuid() };\n    });\n    data = shuffle(data);\n    resolve(data);\n  });\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cn from \"classnames\";\nimport \"./Card.css\";\n\nconst Card = ({ id, index, isMatched, label, isSelected, selectCard }) => {\n  const isFlipped = isMatched || isSelected;\n\n  const select = () => {\n    !isSelected && selectCard(id);\n  };\n\n  const handleCardClick = (evt) => {\n    evt.preventDefault();\n    select();\n  };\n\n  const handleCardKeyDown = (evt) => {\n    if (evt.keyCode === 13 || evt.keyCode === 32) {\n      select();\n    }\n  };\n\n  return (\n    <div\n      className={cn(\"Card\", { \"Card--flipped\": isFlipped })}\n      role=\"button\"\n      tabIndex=\"0\"\n      onClick={handleCardClick}\n      onKeyDown={handleCardKeyDown}\n      aria-label={`Card ${index + 1}`}\n    >\n      <div className=\"Card__inner\">\n        <div className=\"Card__front\" aria-hidden={isFlipped}>\n          ?\n        </div>\n        <div className=\"Card__back\" aria-hidden={!isFlipped}>\n          {label}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  isMatched: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  selectCard: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool.isRequired,\n};\n\nexport default Card;\n","import React, { useEffect, useState } from \"react\";\nimport useApp from \"../../hooks/useApp\";\nimport getData, { getDataById } from \"../../api/getData\";\nimport \"./Cards.css\";\nimport Card from \"../Card/Card\";\n\nconst SETTINGS = {\n  clearSelectedTimeout: 800,\n};\n\nconst initialState = { selected: {}, matched: {} };\n\nconst Cards = () => {\n  const appState = useApp();\n  const [data, setData] = useState([]);\n  const [cards, setCards] = useState(initialState);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await getData();\n      setData(data);\n    };\n    fetchData();\n  }, []);\n\n  const handleSelectCard = (id) => {\n    const selectedKeys = Object.keys(cards.selected);\n    if (\n      selectedKeys.length > 1 ||\n      cards.selected.hasOwnProperty(id) ||\n      cards.matched.hasOwnProperty(id)\n    )\n      return;\n\n    if (!selectedKeys.length) {\n      setCards({ ...cards, selected: { [id]: true } });\n      return;\n    }\n\n    appState.incrementTurns(true);\n\n    const firstCardId = selectedKeys[0];\n    if (getDataById(firstCardId, data).label === getDataById(id, data).label) {\n      const matched = { ...cards.matched, [firstCardId]: true, [id]: true };\n      setCards({ ...cards, matched, selected: initialState.selected });\n      if (Object.keys(matched).length === data.length) {\n        appState.setWinner(true);\n      }\n    } else {\n      setCards({ ...cards, selected: { ...cards.selected, [id]: true } });\n      setTimeout(() => {\n        setCards({ ...cards, selected: initialState.selected });\n      }, SETTINGS.clearSelectedTimeout);\n    }\n  };\n\n  return (\n    <main className=\"Main\">\n      <div className=\"Cards\">\n        {data.map((card, i) => (\n          <Card\n            {...card}\n            key={`card_${card.id}`}\n            index={i}\n            isMatched={cards.matched.hasOwnProperty(card.id)}\n            selectCard={(id) => handleSelectCard(id)}\n            isSelected={cards.selected.hasOwnProperty(card.id)}\n          />\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default Cards;\n","import React, { useReducer } from \"react\";\nimport AppProvider from \"./providers/appProvider\";\nimport appReducer, { initialState } from \"./reducers/appReducer\";\nimport Header from \"./Components/Header/Header\";\nimport Cards from \"./Components/Cards/Cards\";\n\nconst App = () => {\n  const state = useReducer(appReducer, initialState);\n  return (\n    <div className=\"App\">\n      <AppProvider value={state}>\n        <Header />\n        <Cards />\n      </AppProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}